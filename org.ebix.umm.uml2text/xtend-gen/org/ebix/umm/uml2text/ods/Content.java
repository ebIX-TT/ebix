/**
 * UMM Schema Generator
 *  Copyright (C) 2014  ebIX, the European forum for energy Business Information eXchange.
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.ebix.umm.uml2text.ods;

import org.ebix.umm.uml2text.UmmStereotypes;
import org.ebix.umm.uml2text.ods.BasicFunctions;
import org.ebix.umm.uml2text.ods.BdtContent;
import org.ebix.umm.uml2text.ods.BieContent;
import org.ebix.umm.uml2text.ods.CcContent;
import org.ebix.umm.uml2text.ods.OdsPart;
import org.eclipse.uml2.uml.Model;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class Content extends OdsPart {
  private UmmStereotypes ummStereotypes;
  
  private Model umlModel;
  
  private CcContent ccContent;
  
  private BieContent bieContent;
  
  private BdtContent bdtContent;
  
  public Content(final UmmStereotypes ummStereotypes, final Model umlModel) {
    this.ummStereotypes = ummStereotypes;
    this.umlModel = umlModel;
    CcContent _ccContent = new CcContent(ummStereotypes, umlModel);
    this.ccContent = _ccContent;
    BieContent _bieContent = new BieContent(ummStereotypes, umlModel);
    this.bieContent = _bieContent;
    BdtContent _bdtContent = new BdtContent(ummStereotypes, umlModel);
    this.bdtContent = _bdtContent;
  }
  
  public String fileName() {
    return "content.xml";
  }
  
  public String content() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<office:document-content xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:style=\"urn:oasis:names:tc:opendocument:xmlns:style:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:text=\"urn:oasis:names:tc:opendocument:xmlns:text:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:table=\"urn:oasis:names:tc:opendocument:xmlns:table:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:draw=\"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:fo=\"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:xlink=\"http://www.w3.org/1999/xlink\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:meta=\"urn:oasis:names:tc:opendocument:xmlns:meta:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:number=\"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:presentation=\"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:svg=\"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:chart=\"urn:oasis:names:tc:opendocument:xmlns:chart:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:dr3d=\"urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:math=\"http://www.w3.org/1998/Math/MathML\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:form=\"urn:oasis:names:tc:opendocument:xmlns:form:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:script=\"urn:oasis:names:tc:opendocument:xmlns:script:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:ooo=\"http://openoffice.org/2004/office\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:ooow=\"http://openoffice.org/2004/writer\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:oooc=\"http://openoffice.org/2004/calc\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:dom=\"http://www.w3.org/2001/xml-events\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:xforms=\"http://www.w3.org/2002/xforms\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:rpt=\"http://openoffice.org/2005/report\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:of=\"urn:oasis:names:tc:opendocument:xmlns:of:1.2\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:grddl=\"http://www.w3.org/2003/g/data-view#\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:field=\"urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:formx=\"urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:css3t=\"http://www.w3.org/TR/css3-text/\" ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("office:version=\"1.1\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<office:scripts/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<office:font-face-decls>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:font-face style:name=\"Liberation Sans\" svg:font-family=\"&apos;Liberation Sans&apos;\" style:font-family-generic=\"swiss\" style:font-pitch=\"variable\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:font-face style:name=\"DejaVu Sans\" svg:font-family=\"&apos;DejaVu Sans&apos;\" style:font-family-generic=\"system\" style:font-pitch=\"variable\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:font-face style:name=\"Lohit Hindi\" svg:font-family=\"&apos;Lohit Hindi&apos;\" style:font-family-generic=\"system\" style:font-pitch=\"variable\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:font-face style:name=\"WenQuanYi Micro Hei\" svg:font-family=\"&apos;WenQuanYi Micro Hei&apos;\" style:font-family-generic=\"system\" style:font-pitch=\"variable\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</office:font-face-decls>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<office:automatic-styles>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"co1\" style:family=\"table-column\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-column-properties fo:break-before=\"auto\" style:column-width=\"0.8925in\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"co-narrow\" style:family=\"table-column\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-column-properties fo:break-before=\"auto\" style:column-width=\"0.5000in\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"co-name\" style:family=\"table-column\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-column-properties fo:break-before=\"auto\" style:column-width=\"5.2000in\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"co-term\" style:family=\"table-column\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-column-properties fo:break-before=\"auto\" style:column-width=\"3.0000in\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"ro1\" style:family=\"table-row\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-row-properties style:row-height=\"0.178in\" fo:break-before=\"auto\" style:use-optimal-row-height=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"rheader\" style:family=\"table-row\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-row-properties style:row-height=\"0.300in\" fo:break-before=\"auto\" style:use-optimal-row-height=\"false\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"rdef\" style:family=\"table-row\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-row-properties style:row-height=\"0.650in\" fo:break-before=\"auto\" style:use-optimal-row-height=\"false\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"rclass\" style:family=\"table-row\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-row-properties style:row-height=\"0.400in\" fo:break-before=\"auto\" style:use-optimal-row-height=\"false\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"rattr\" style:family=\"table-row\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-row-properties style:row-height=\"0.400in\" fo:break-before=\"auto\" style:use-optimal-row-height=\"false\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"ta1\" style:family=\"table\" style:master-page-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-properties table:display=\"true\" style:writing-mode=\"lr-tb\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"ce1\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:text-properties fo:font-weight=\"bold\" style:font-weight-asian=\"bold\" style:font-weight-complex=\"bold\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"cheader\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-cell-properties fo:background-color=\"#000000\" style:vertical-align=\"top\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:text-properties fo:color=\"#ffffff\" fo:font-weight=\"bold\" style:font-weight-asian=\"bold\" style:font-weight-complex=\"bold\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"cdef\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-cell-properties fo:background-color=\"#ffff00\" fo:wrap-option=\"wrap\" style:vertical-align=\"top\" />");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:text-properties fo:color=\"#000000\" fo:font-weight=\"bold\" style:font-weight-asian=\"bold\" style:font-weight-complex=\"bold\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"cclass\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-cell-properties fo:background-color=\"#ffff00\" style:vertical-align=\"top\" />");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:text-properties fo:color=\"#000000\" fo:font-weight=\"bold\" style:font-weight-asian=\"bold\" style:font-weight-complex=\"bold\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"cclass-wrap\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-cell-properties fo:background-color=\"#ffff00\" fo:wrap-option=\"wrap\" style:vertical-align=\"top\" />");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:text-properties fo:color=\"#000000\" fo:font-weight=\"bold\" style:font-weight-asian=\"bold\" style:font-weight-complex=\"bold\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"cclass-red\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-cell-properties fo:background-color=\"#800000\" style:vertical-align=\"top\" />");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:text-properties fo:color=\"#000000\" fo:font-weight=\"bold\" style:font-weight-asian=\"bold\" style:font-weight-complex=\"bold\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"cattr\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-cell-properties fo:wrap-option=\"wrap\" style:vertical-align=\"top\" />");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"cattr-wrap\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-cell-properties fo:wrap-option=\"wrap\" style:vertical-align=\"top\" />");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style:style style:name=\"cattr-blue\" style:family=\"table-cell\" style:parent-style-name=\"Default\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:table-cell-properties style:vertical-align=\"top\" />");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<style:text-properties fo:color=\"#000080\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style:style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</office:automatic-styles>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<office:body>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<office:spreadsheet>");
    _builder.newLine();
    _builder.append("\t\t\t");
    CharSequence _sheet = this.ccContent.sheet();
    _builder.append(_sheet, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    CharSequence _sheet_1 = this.bieContent.sheet();
    _builder.append(_sheet_1, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    CharSequence _sheet_2 = this.bdtContent.sheet();
    _builder.append(_sheet_2, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    CharSequence _usageRulesSheet = this.usageRulesSheet();
    _builder.append(_usageRulesSheet, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    CharSequence _constraintTypeCodeSheet = this.constraintTypeCodeSheet();
    _builder.append(_constraintTypeCodeSheet, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    CharSequence _conditionTypeCodeSheet = this.conditionTypeCodeSheet();
    _builder.append(_conditionTypeCodeSheet, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</office:spreadsheet>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</office:body>");
    _builder.newLine();
    _builder.append("</office:document-content>");
    _builder.newLine();
    return _builder.toString();
  }
  
  public CharSequence usageRulesSheet() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<table:table table:name=\"UsageRules\" table:style-name=\"ta1\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co1\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co1\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-name\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-term\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-term\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _openHeaderRow = BasicFunctions.openHeaderRow();
    _builder.append(_openHeaderRow, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _headerCell = BasicFunctions.headerCell("Unique ID", "Constraint", "Constraint Type Code", 
      "Constraint Language Code", "Condition Type (pre, post, or invariant)");
    _builder.append(_headerCell, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _closeHeaderRow = BasicFunctions.closeHeaderRow();
    _builder.append(_closeHeaderRow, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _openRow = BasicFunctions.openRow("rdef");
    _builder.append(_openRow, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell = BasicFunctions.cell("cdef", "");
    _builder.append(_cell, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_1 = BasicFunctions.cell("cdef", "");
    _builder.append(_cell_1, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_2 = BasicFunctions.cell("cdef", "UNS, OCL, SBVR, XSRE, ECL, CHIP, CAT, BON, NCL, PERL, SCR");
    _builder.append(_cell_2, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_3 = BasicFunctions.cell("cdef", "");
    _builder.append(_cell_3, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_4 = BasicFunctions.cell("cdef", "PRE, POST, INV");
    _builder.append(_cell_4, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _closeRow = BasicFunctions.closeRow();
    _builder.append(_closeRow, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _openRow_1 = BasicFunctions.openRow("rdef");
    _builder.append(_openRow_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_5 = BasicFunctions.cell("cdef", "");
    _builder.append(_cell_5, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_6 = BasicFunctions.cell("cdef", "");
    _builder.append(_cell_6, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_7 = BasicFunctions.cell("cdef", "OCL");
    _builder.append(_cell_7, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_8 = BasicFunctions.cell("cdef", "EN");
    _builder.append(_cell_8, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _cell_9 = BasicFunctions.cell("cdef", "INV");
    _builder.append(_cell_9, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _closeRow_1 = BasicFunctions.closeRow();
    _builder.append(_closeRow_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("</table:table>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence constraintTypeCodeSheet() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<table:table table:name=\"ConstraintTypeCode\" table:style-name=\"ta1\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-narrow\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-term\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-name\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _header = this.header();
    _builder.append(_header, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row = this.row("UNS", "Unstructured", "An unstructured constraint is expressed in plain text without any formalism other than the grammar of the language in which it is expressed");
    _builder.append(_row, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_1 = this.row("OCL", "OCL", "The Object Constraint Language is a declarative language for describing rules that apply to Unified Modeling Language (UML) models");
    _builder.append(_row_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_2 = this.row("SBVR", "Semantics of Business Vocabulary and Business Rules", "The Semantics of Business Vocabulary and Business Rules (SBVR) is a formal and detailed natural language declarative description of a complex entity that is an integral part of the OMG Model Driven Architecture (MDA)");
    _builder.append(_row_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_3 = this.row("XSRE", "XML Schema Regular Expression", "XML Schema Regular Expression is used to formally define the pattern facet in a W3C XML Schema Definition Language Schema");
    _builder.append(_row_3, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_4 = this.row("ECL", "Eclipse", "The Eclipse language is a constraint logic programming system that implements an open source programming language");
    _builder.append(_row_4, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_5 = this.row("CHIP", "Constraint Handling in Prolog", "The Constraint Handling in Prolog (CHIP) language is used to tell an object what to do");
    _builder.append(_row_5, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_6 = this.row("CAT", "Catalysis", "Catalysis is an approach for the systematic business-driven development of component-based systems based on the Unified Modeling Language");
    _builder.append(_row_6, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_7 = this.row("BON", "Business Object Notation", "Business Object Notation is a method and graphical notation for high-level object oriented analysis and design");
    _builder.append(_row_7, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_8 = this.row("NCL", "Natural Constraint Language", "The Natural Constraint Language is a description language with mathematical logic as syntax");
    _builder.append(_row_8, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_9 = this.row("PERL", "Perl", "Scripting program language");
    _builder.append(_row_9, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_10 = this.row("SCR", "Schematron", "XML Schematron");
    _builder.append(_row_10, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("</table:table>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence conditionTypeCodeSheet() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<table:table table:name=\"ConditionTypeCode\" table:style-name=\"ta1\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-narrow\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-name\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table:table-column table:style-name=\"co-name\" table:default-cell-style-name=\"Default\"/>");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _header = this.header();
    _builder.append(_header, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row = this.row("PRE", "Precondition", "A precondition to an operation is a restriction that must be true at the moment that the operation is going to be executed");
    _builder.append(_row, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_1 = this.row("POST", "Postcondition", "A postcondition to an operation is a restriction that must be true at the moment that the operation has just ended its execution");
    _builder.append(_row_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _row_2 = this.row("INV", "Invariant", "An invariant is a constraint that states a condition that must always be met by all instances of the class, type, or interface. An invariant is described using an expression that evaluates to true if the invariant is met. Invariants must be true all the time.");
    _builder.append(_row_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("</table:table>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence header() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _openHeaderRow = BasicFunctions.openHeaderRow();
    _builder.append(_openHeaderRow, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _headerCell = BasicFunctions.headerCell("Code", "Name", "Description");
    _builder.append(_headerCell, "\t");
    _builder.newLineIfNotEmpty();
    CharSequence _closeHeaderRow = BasicFunctions.closeHeaderRow();
    _builder.append(_closeHeaderRow, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence row(final String code, final String name, final String description) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _openRow = BasicFunctions.openRow("rdef");
    _builder.append(_openRow, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _cell = BasicFunctions.cell("cdef", code);
    _builder.append(_cell, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _cell_1 = BasicFunctions.cell("cdef", name);
    _builder.append(_cell_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _cell_2 = BasicFunctions.cell("cdef", description);
    _builder.append(_cell_2, "\t");
    _builder.newLineIfNotEmpty();
    CharSequence _closeRow = BasicFunctions.closeRow();
    _builder.append(_closeRow, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
